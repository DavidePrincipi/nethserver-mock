#!/usr/bin/python

#
# Copyright (C) 2016 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import requests
import re

redmine_refs = {}
github_refs = {}

github_match = re.compile('NethServer/dev#(\d+)')
redmine_match = re.compile('Refs\s+#(\d+)')

for line in sys.stdin:
    redmine_refs.update(dict.fromkeys(re.findall(redmine_match, line)))
    github_refs.update(dict.fromkeys(re.findall(github_match, line)))

for issue_id in redmine_refs.iterkeys():
    try:
        issue = requests.get('http://dev.nethserver.org/issues/%s.json' % issue_id).json()['issue']
        print "- %s - %s #%s [%s]%s" % ( \
            issue["subject"], \
            issue["tracker"]["name"], \
            issue["id"], \
            issue["project"]["name"], \
            "" if issue["status"]["name"] in ["CLOSED", "VERIFIED"] \
                else " !!%s" % issue["status"]["name"] \
        )
    except Exception, e:
        sys.stderr.write("[ERROR] %s" % str(e))

for issue_id in github_refs.iterkeys():
    try:
        # FIXME: GitHub rate limit for unauthenticated clients is 60 per hour per IP
        issue = requests.get('https://api.github.com/repos/NethServer/dev/issues/%s' % issue_id).json()
        print "- %s - %sNethServer/dev#%s%s" % ( \
            issue['title'], \
            "Bug " if filter(lambda l: l["name"] == "bug", issue["labels"]) \
               else "", \
            issue['number'], \
            "" if filter(lambda l: l["name"] == "verified", issue["labels"]) \
               else " !! INCOMPLETE" \
        )
    except Exception, e:
        sys.stderr.write("[ERROR] %s" % str(e))

